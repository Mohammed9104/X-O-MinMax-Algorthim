# -*- coding: utf-8 -*-
"""Untitled72.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/136lAWCuKCT1ZkzyyoHkOpFJ61lEKh092
"""

# Define players and their respective symbols
player = 'O'
computer = 'X'

# Initialize the game board
board = {1: ' ', 2: ' ', 3: ' ',
         4: ' ', 5: ' ', 6: ' ',
         7: ' ', 8: ' ', 9: ' '}

# Function to print the current state of the board
def printtable(board):
    print(board[1] + '|' + board[2] + '|' + board[3])
    print('-+-+-')
    print(board[4] + '|' + board[5] + '|' + board[6])
    print('-+-+-')
    print(board[7] + '|' + board[8] + '|' + board[9])
    print("\n")

# Function to check if a position on the board is empty
def positionIsFree(position):
    if board[position] == ' ':
        return True
    else:
        return False

# Function to insert a player's symbol into a specified position
def insertInPosition(letter, position):
    # Check if the position is free
    if positionIsFree(position):
        # Insert the symbol into the position
        board[position] = letter
        # Print the updated board
        printtable(board)
        # Check for game end conditions
        if (checkDraw()):
            print("Draw!")
            exit()
        if checkPossibleWins():
            if letter == 'X':
                print("Computer wins!")
                exit()
            else:
                print("Player wins!")
                exit()
    else:
        print("Can't insert there!")
        # Ask for a new position if the chosen one is not available
        position = int(input("Please enter new position:  "))
        insertInPosition(letter, position)
        return

# Function to check for possible wins
def checkPossibleWins():
    # Check all possible winning combinations
    if (board[1] == board[2] and board[1] == board[3] and board[1] != ' '):
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] != ' '):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] != ' '):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] != ' '):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] != ' '):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] != ' '):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] != ' '):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] != ' '):
        return True
    else:
        return False

# Function to check if any player has won with a specific symbol
def checkWhichMarkWon(mark):
    # Check all possible winning combinations for the given symbol
    if board[1] == board[2] and board[1] == board[3] and board[1] == mark:
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] == mark):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] == mark):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] == mark):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] == mark):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] == mark):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] == mark):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] == mark):
        return True
    else:
        return False

# Function to check if the game has ended in a draw
def checkDraw():
    for key in board.keys():
        if (board[key] == ' '):
            return False
    return True

# Function for the player's move
def playerMove():
    position = int(input("Enter the position for 'O':  "))
    insertInPosition(player, position)

# Function for the computer's move
def computerMove():
    bestScore = -1000
    bestMove = 0
    # Iterate through all empty positions
    for key in board.keys():
        if (board[key] == ' '):
            # Simulate placing the computer's symbol in this position
            board[key] = computer
            # Call the minimax algorithm to find the best move
            score = miniMax(board, False)
            # Undo the move
            board[key] = ' '
            # Update the best score and move if this move is better
            if (score > bestScore):
                bestScore = score
                bestMove = key
    # Make the best move
    insertInPosition(computer, bestMove)

# Minimax algorithm for the computer's move decision
def miniMax(board, isMaximizing):
    # Base cases
    if (checkWhichMarkWon(computer)):
        return 1
    elif (checkWhichMarkWon(player)):
        return -1
    elif (checkDraw()):
        return 0
    # Recursive cases
    if (isMaximizing):
        bestScore = -1000
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = computer
                score = miniMax(board, False)
                board[key] = ' '
                if (score > bestScore):
                    bestScore = score
        return bestScore
    else:
        bestScore = 1000
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = player
                score = miniMax(board, True)
                board[key] = ' '
                if (score < bestScore):
                    bestScore = score
        return bestScore

# Main game loop
print("Computer will play first..")
print("Positions are as follow:")
print("1, 2, 3 ")
print("4, 5, 6 ")
print("7, 8, 9 ")
print("\n")

while not checkPossibleWins():
    # Computer moves first
    computerMove()
    # Player moves Second
    playerMove()